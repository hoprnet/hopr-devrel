// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DergisteredNodeSafe extends ethereum.Event {
  get params(): DergisteredNodeSafe__Params {
    return new DergisteredNodeSafe__Params(this);
  }
}

export class DergisteredNodeSafe__Params {
  _event: DergisteredNodeSafe;

  constructor(event: DergisteredNodeSafe) {
    this._event = event;
  }

  get safeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nodeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegisteredNodeSafe extends ethereum.Event {
  get params(): RegisteredNodeSafe__Params {
    return new RegisteredNodeSafe__Params(this);
  }
}

export class RegisteredNodeSafe__Params {
  _event: RegisteredNodeSafe;

  constructor(event: RegisteredNodeSafe) {
    this._event = event;
  }

  get safeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nodeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NodeSafeRegistry__isNodeSafeRegisteredInputNodeSafeStruct extends ethereum.Tuple {
  get safeAddress(): Address {
    return this[0].toAddress();
  }

  get nodeChainKeyAddress(): Address {
    return this[1].toAddress();
  }
}

export class NodeSafeRegistry extends ethereum.SmartContract {
  static bind(address: Address): NodeSafeRegistry {
    return new NodeSafeRegistry("NodeSafeRegistry", address);
  }

  NODE_SAFE_TYPEHASH(): Bytes {
    let result = super.call(
      "NODE_SAFE_TYPEHASH",
      "NODE_SAFE_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_NODE_SAFE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "NODE_SAFE_TYPEHASH",
      "NODE_SAFE_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isNodeSafeRegistered(
    nodeSafe: NodeSafeRegistry__isNodeSafeRegisteredInputNodeSafeStruct
  ): boolean {
    let result = super.call(
      "isNodeSafeRegistered",
      "isNodeSafeRegistered((address,address)):(bool)",
      [ethereum.Value.fromTuple(nodeSafe)]
    );

    return result[0].toBoolean();
  }

  try_isNodeSafeRegistered(
    nodeSafe: NodeSafeRegistry__isNodeSafeRegisteredInputNodeSafeStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNodeSafeRegistered",
      "isNodeSafeRegistered((address,address)):(bool)",
      [ethereum.Value.fromTuple(nodeSafe)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nodeToSafe(param0: Address): Address {
    let result = super.call("nodeToSafe", "nodeToSafe(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_nodeToSafe(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("nodeToSafe", "nodeToSafe(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeregisterNodeBySafeCall extends ethereum.Call {
  get inputs(): DeregisterNodeBySafeCall__Inputs {
    return new DeregisterNodeBySafeCall__Inputs(this);
  }

  get outputs(): DeregisterNodeBySafeCall__Outputs {
    return new DeregisterNodeBySafeCall__Outputs(this);
  }
}

export class DeregisterNodeBySafeCall__Inputs {
  _call: DeregisterNodeBySafeCall;

  constructor(call: DeregisterNodeBySafeCall) {
    this._call = call;
  }

  get nodeAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeregisterNodeBySafeCall__Outputs {
  _call: DeregisterNodeBySafeCall;

  constructor(call: DeregisterNodeBySafeCall) {
    this._call = call;
  }
}

export class RegisterSafeByNodeCall extends ethereum.Call {
  get inputs(): RegisterSafeByNodeCall__Inputs {
    return new RegisterSafeByNodeCall__Inputs(this);
  }

  get outputs(): RegisterSafeByNodeCall__Outputs {
    return new RegisterSafeByNodeCall__Outputs(this);
  }
}

export class RegisterSafeByNodeCall__Inputs {
  _call: RegisterSafeByNodeCall;

  constructor(call: RegisterSafeByNodeCall) {
    this._call = call;
  }

  get safeAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterSafeByNodeCall__Outputs {
  _call: RegisterSafeByNodeCall;

  constructor(call: RegisterSafeByNodeCall) {
    this._call = call;
  }
}

export class RegisterSafeWithNodeSigCall extends ethereum.Call {
  get inputs(): RegisterSafeWithNodeSigCall__Inputs {
    return new RegisterSafeWithNodeSigCall__Inputs(this);
  }

  get outputs(): RegisterSafeWithNodeSigCall__Outputs {
    return new RegisterSafeWithNodeSigCall__Outputs(this);
  }
}

export class RegisterSafeWithNodeSigCall__Inputs {
  _call: RegisterSafeWithNodeSigCall;

  constructor(call: RegisterSafeWithNodeSigCall) {
    this._call = call;
  }

  get nodeSafe(): RegisterSafeWithNodeSigCallNodeSafeStruct {
    return changetype<RegisterSafeWithNodeSigCallNodeSafeStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get sig(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RegisterSafeWithNodeSigCall__Outputs {
  _call: RegisterSafeWithNodeSigCall;

  constructor(call: RegisterSafeWithNodeSigCall) {
    this._call = call;
  }
}

export class RegisterSafeWithNodeSigCallNodeSafeStruct extends ethereum.Tuple {
  get safeAddress(): Address {
    return this[0].toAddress();
  }

  get nodeChainKeyAddress(): Address {
    return this[1].toAddress();
  }
}
