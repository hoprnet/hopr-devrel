// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("actualStake", Value.fromBigInt(BigInt.zero()));
    this.set("lastSyncTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("unclaimedRewards", Value.fromBigInt(BigInt.zero()));
    this.set("boostRate", Value.fromBigInt(BigInt.zero()));
    this.set("appliedBoosts", Value.fromStringArray(new Array(0)));
    this.set("ignoredBoosts", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get actualStake(): BigInt {
    let value = this.get("actualStake");
    return value!.toBigInt();
  }

  set actualStake(value: BigInt) {
    this.set("actualStake", Value.fromBigInt(value));
  }

  get lastSyncTimestamp(): BigInt {
    let value = this.get("lastSyncTimestamp");
    return value!.toBigInt();
  }

  set lastSyncTimestamp(value: BigInt) {
    this.set("lastSyncTimestamp", Value.fromBigInt(value));
  }

  get unclaimedRewards(): BigInt {
    let value = this.get("unclaimedRewards");
    return value!.toBigInt();
  }

  set unclaimedRewards(value: BigInt) {
    this.set("unclaimedRewards", Value.fromBigInt(value));
  }

  get boostRate(): BigInt {
    let value = this.get("boostRate");
    return value!.toBigInt();
  }

  set boostRate(value: BigInt) {
    this.set("boostRate", Value.fromBigInt(value));
  }

  get appliedBoosts(): Array<string> {
    let value = this.get("appliedBoosts");
    return value!.toStringArray();
  }

  set appliedBoosts(value: Array<string>) {
    this.set("appliedBoosts", Value.fromStringArray(value));
  }

  get ignoredBoosts(): Array<string> {
    let value = this.get("ignoredBoosts");
    return value!.toStringArray();
  }

  set ignoredBoosts(value: Array<string>) {
    this.set("ignoredBoosts", Value.fromStringArray(value));
  }
}

export class Boost extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("boostType", Value.fromBigInt(BigInt.zero()));
    this.set("boostNumerator", Value.fromBigInt(BigInt.zero()));
    this.set("redeemDeadline", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Boost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Boost must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Boost", id.toString(), this);
    }
  }

  static load(id: string): Boost | null {
    return changetype<Boost | null>(store.get("Boost", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get boostType(): BigInt {
    let value = this.get("boostType");
    return value!.toBigInt();
  }

  set boostType(value: BigInt) {
    this.set("boostType", Value.fromBigInt(value));
  }

  get boostNumerator(): BigInt {
    let value = this.get("boostNumerator");
    return value!.toBigInt();
  }

  set boostNumerator(value: BigInt) {
    this.set("boostNumerator", Value.fromBigInt(value));
  }

  get redeemDeadline(): BigInt {
    let value = this.get("redeemDeadline");
    return value!.toBigInt();
  }

  set redeemDeadline(value: BigInt) {
    this.set("redeemDeadline", Value.fromBigInt(value));
  }
}

export class Program extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("currentRewardPool", Value.fromBigInt(BigInt.zero()));
    this.set("totalActualStake", Value.fromBigInt(BigInt.zero()));
    this.set("totalUnclaimedRewards", Value.fromBigInt(BigInt.zero()));
    this.set("lastSyncTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockedType", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Program entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Program must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Program", id.toString(), this);
    }
  }

  static load(id: string): Program | null {
    return changetype<Program | null>(store.get("Program", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentRewardPool(): BigInt {
    let value = this.get("currentRewardPool");
    return value!.toBigInt();
  }

  set currentRewardPool(value: BigInt) {
    this.set("currentRewardPool", Value.fromBigInt(value));
  }

  get totalActualStake(): BigInt {
    let value = this.get("totalActualStake");
    return value!.toBigInt();
  }

  set totalActualStake(value: BigInt) {
    this.set("totalActualStake", Value.fromBigInt(value));
  }

  get totalUnclaimedRewards(): BigInt {
    let value = this.get("totalUnclaimedRewards");
    return value!.toBigInt();
  }

  set totalUnclaimedRewards(value: BigInt) {
    this.set("totalUnclaimedRewards", Value.fromBigInt(value));
  }

  get lastSyncTimestamp(): BigInt {
    let value = this.get("lastSyncTimestamp");
    return value!.toBigInt();
  }

  set lastSyncTimestamp(value: BigInt) {
    this.set("lastSyncTimestamp", Value.fromBigInt(value));
  }

  get blockedType(): Array<BigInt> {
    let value = this.get("blockedType");
    return value!.toBigIntArray();
  }

  set blockedType(value: Array<BigInt>) {
    this.set("blockedType", Value.fromBigIntArray(value));
  }
}
