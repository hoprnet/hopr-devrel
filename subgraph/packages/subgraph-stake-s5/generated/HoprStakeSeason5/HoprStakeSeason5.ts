// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NftAllowed extends ethereum.Event {
  get params(): NftAllowed__Params {
    return new NftAllowed__Params(this);
  }
}

export class NftAllowed__Params {
  _event: NftAllowed;

  constructor(event: NftAllowed) {
    this._event = event;
  }

  get typeIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NftBlocked extends ethereum.Event {
  get params(): NftBlocked__Params {
    return new NftBlocked__Params(this);
  }
}

export class NftBlocked__Params {
  _event: NftBlocked;

  constructor(event: NftBlocked) {
    this._event = event;
  }

  get typeIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get boostTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get factorRegistered(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Released extends ethereum.Event {
  get params(): Released__Params {
    return new Released__Params(this);
  }
}

export class Released__Params {
  _event: Released;

  constructor(event: Released) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get actualAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardFueled extends ethereum.Event {
  get params(): RewardFueled__Params {
    return new RewardFueled__Params(this);
  }
}

export class RewardFueled__Params {
  _event: RewardFueled;

  constructor(event: RewardFueled) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get actualAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get increment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HoprStakeSeason5__accountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class HoprStakeSeason5 extends ethereum.SmartContract {
  static bind(address: Address): HoprStakeSeason5 {
    return new HoprStakeSeason5("HoprStakeSeason5", address);
  }

  BASIC_FACTOR_NUMERATOR(): BigInt {
    let result = super.call(
      "BASIC_FACTOR_NUMERATOR",
      "BASIC_FACTOR_NUMERATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BASIC_FACTOR_NUMERATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASIC_FACTOR_NUMERATOR",
      "BASIC_FACTOR_NUMERATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BOOST_CAP(): BigInt {
    let result = super.call("BOOST_CAP", "BOOST_CAP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BOOST_CAP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BOOST_CAP", "BOOST_CAP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FACTOR_DENOMINATOR(): BigInt {
    let result = super.call(
      "FACTOR_DENOMINATOR",
      "FACTOR_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FACTOR_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FACTOR_DENOMINATOR",
      "FACTOR_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOCK_TOKEN(): Address {
    let result = super.call("LOCK_TOKEN", "LOCK_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_LOCK_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("LOCK_TOKEN", "LOCK_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  NFT_CONTRACT(): Address {
    let result = super.call("NFT_CONTRACT", "NFT_CONTRACT():(address)", []);

    return result[0].toAddress();
  }

  try_NFT_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall("NFT_CONTRACT", "NFT_CONTRACT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PROGRAM_END(): BigInt {
    let result = super.call("PROGRAM_END", "PROGRAM_END():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROGRAM_END(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PROGRAM_END", "PROGRAM_END():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROGRAM_START(): BigInt {
    let result = super.call("PROGRAM_START", "PROGRAM_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROGRAM_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PROGRAM_START",
      "PROGRAM_START():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_TOKEN(): Address {
    let result = super.call("REWARD_TOKEN", "REWARD_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_REWARD_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("REWARD_TOKEN", "REWARD_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accounts(param0: Address): HoprStakeSeason5__accountsResult {
    let result = super.call(
      "accounts",
      "accounts(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new HoprStakeSeason5__accountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_accounts(
    param0: Address
  ): ethereum.CallResult<HoprStakeSeason5__accountsResult> {
    let result = super.tryCall(
      "accounts",
      "accounts(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HoprStakeSeason5__accountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  availableReward(): BigInt {
    let result = super.call(
      "availableReward",
      "availableReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableReward",
      "availableReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCumulatedRewardsIncrement(_account: Address): BigInt {
    let result = super.call(
      "getCumulatedRewardsIncrement",
      "getCumulatedRewardsIncrement(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_getCumulatedRewardsIncrement(
    _account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCumulatedRewardsIncrement",
      "getCumulatedRewardsIncrement(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isBlockedNft(param0: BigInt): boolean {
    let result = super.call("isBlockedNft", "isBlockedNft(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isBlockedNft(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBlockedNft", "isBlockedNft(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNftTypeAndRankRedeemed1(
    nftType: string,
    nftRank: string,
    hodler: Address
  ): boolean {
    let result = super.call(
      "isNftTypeAndRankRedeemed1",
      "isNftTypeAndRankRedeemed1(string,string,address):(bool)",
      [
        ethereum.Value.fromString(nftType),
        ethereum.Value.fromString(nftRank),
        ethereum.Value.fromAddress(hodler)
      ]
    );

    return result[0].toBoolean();
  }

  try_isNftTypeAndRankRedeemed1(
    nftType: string,
    nftRank: string,
    hodler: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNftTypeAndRankRedeemed1",
      "isNftTypeAndRankRedeemed1(string,string,address):(bool)",
      [
        ethereum.Value.fromString(nftType),
        ethereum.Value.fromString(nftRank),
        ethereum.Value.fromAddress(hodler)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNftTypeAndRankRedeemed2(
    nftTypeIndex: BigInt,
    nftRank: string,
    hodler: Address
  ): boolean {
    let result = super.call(
      "isNftTypeAndRankRedeemed2",
      "isNftTypeAndRankRedeemed2(uint256,string,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nftTypeIndex),
        ethereum.Value.fromString(nftRank),
        ethereum.Value.fromAddress(hodler)
      ]
    );

    return result[0].toBoolean();
  }

  try_isNftTypeAndRankRedeemed2(
    nftTypeIndex: BigInt,
    nftRank: string,
    hodler: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNftTypeAndRankRedeemed2",
      "isNftTypeAndRankRedeemed2(uint256,string,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nftTypeIndex),
        ethereum.Value.fromString(nftRank),
        ethereum.Value.fromAddress(hodler)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNftTypeAndRankRedeemed3(
    nftTypeIndex: BigInt,
    boostNumerator: BigInt,
    hodler: Address
  ): boolean {
    let result = super.call(
      "isNftTypeAndRankRedeemed3",
      "isNftTypeAndRankRedeemed3(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nftTypeIndex),
        ethereum.Value.fromUnsignedBigInt(boostNumerator),
        ethereum.Value.fromAddress(hodler)
      ]
    );

    return result[0].toBoolean();
  }

  try_isNftTypeAndRankRedeemed3(
    nftTypeIndex: BigInt,
    boostNumerator: BigInt,
    hodler: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNftTypeAndRankRedeemed3",
      "isNftTypeAndRankRedeemed3(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nftTypeIndex),
        ethereum.Value.fromUnsignedBigInt(boostNumerator),
        ethereum.Value.fromAddress(hodler)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNftTypeAndRankRedeemed4(
    nftType: string,
    boostNumerator: BigInt,
    hodler: Address
  ): boolean {
    let result = super.call(
      "isNftTypeAndRankRedeemed4",
      "isNftTypeAndRankRedeemed4(string,uint256,address):(bool)",
      [
        ethereum.Value.fromString(nftType),
        ethereum.Value.fromUnsignedBigInt(boostNumerator),
        ethereum.Value.fromAddress(hodler)
      ]
    );

    return result[0].toBoolean();
  }

  try_isNftTypeAndRankRedeemed4(
    nftType: string,
    boostNumerator: BigInt,
    hodler: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNftTypeAndRankRedeemed4",
      "isNftTypeAndRankRedeemed4(string,uint256,address):(bool)",
      [
        ethereum.Value.fromString(nftType),
        ethereum.Value.fromUnsignedBigInt(boostNumerator),
        ethereum.Value.fromAddress(hodler)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onTokenTransfer(_from: Address, _value: BigInt, _data: Bytes): boolean {
    let result = super.call(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTokenTransfer(
    _from: Address,
    _value: BigInt,
    _data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeemedFactor(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "redeemedFactor",
      "redeemedFactor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemedFactor(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemedFactor",
      "redeemedFactor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemedFactorIndex(param0: Address): BigInt {
    let result = super.call(
      "redeemedFactorIndex",
      "redeemedFactorIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_redeemedFactorIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemedFactorIndex",
      "redeemedFactorIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemedNft(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "redeemedNft",
      "redeemedNft(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemedNft(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemedNft",
      "redeemedNft(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemedNftIndex(param0: Address): BigInt {
    let result = super.call(
      "redeemedNftIndex",
      "redeemedNftIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_redeemedNftIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemedNftIndex",
      "redeemedNftIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedHoprTokens(_account: Address): BigInt {
    let result = super.call(
      "stakedHoprTokens",
      "stakedHoprTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_stakedHoprTokens(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedHoprTokens",
      "stakedHoprTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLocked(): BigInt {
    let result = super.call("totalLocked", "totalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLocked", "totalLocked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OwnerBlockNftTypeCall extends ethereum.Call {
  get inputs(): OwnerBlockNftTypeCall__Inputs {
    return new OwnerBlockNftTypeCall__Inputs(this);
  }

  get outputs(): OwnerBlockNftTypeCall__Outputs {
    return new OwnerBlockNftTypeCall__Outputs(this);
  }
}

export class OwnerBlockNftTypeCall__Inputs {
  _call: OwnerBlockNftTypeCall;

  constructor(call: OwnerBlockNftTypeCall) {
    this._call = call;
  }

  get typeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OwnerBlockNftTypeCall__Outputs {
  _call: OwnerBlockNftTypeCall;

  constructor(call: OwnerBlockNftTypeCall) {
    this._call = call;
  }
}

export class OwnerUnblockNftTypeCall extends ethereum.Call {
  get inputs(): OwnerUnblockNftTypeCall__Inputs {
    return new OwnerUnblockNftTypeCall__Inputs(this);
  }

  get outputs(): OwnerUnblockNftTypeCall__Outputs {
    return new OwnerUnblockNftTypeCall__Outputs(this);
  }
}

export class OwnerUnblockNftTypeCall__Inputs {
  _call: OwnerUnblockNftTypeCall;

  constructor(call: OwnerUnblockNftTypeCall) {
    this._call = call;
  }

  get typeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OwnerUnblockNftTypeCall__Outputs {
  _call: OwnerUnblockNftTypeCall;

  constructor(call: OwnerUnblockNftTypeCall) {
    this._call = call;
  }
}

export class ReclaimErc20TokensCall extends ethereum.Call {
  get inputs(): ReclaimErc20TokensCall__Inputs {
    return new ReclaimErc20TokensCall__Inputs(this);
  }

  get outputs(): ReclaimErc20TokensCall__Outputs {
    return new ReclaimErc20TokensCall__Outputs(this);
  }
}

export class ReclaimErc20TokensCall__Inputs {
  _call: ReclaimErc20TokensCall;

  constructor(call: ReclaimErc20TokensCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReclaimErc20TokensCall__Outputs {
  _call: ReclaimErc20TokensCall;

  constructor(call: ReclaimErc20TokensCall) {
    this._call = call;
  }
}

export class ReclaimErc721TokensCall extends ethereum.Call {
  get inputs(): ReclaimErc721TokensCall__Inputs {
    return new ReclaimErc721TokensCall__Inputs(this);
  }

  get outputs(): ReclaimErc721TokensCall__Outputs {
    return new ReclaimErc721TokensCall__Outputs(this);
  }
}

export class ReclaimErc721TokensCall__Inputs {
  _call: ReclaimErc721TokensCall;

  constructor(call: ReclaimErc721TokensCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReclaimErc721TokensCall__Outputs {
  _call: ReclaimErc721TokensCall;

  constructor(call: ReclaimErc721TokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockForCall extends ethereum.Call {
  get inputs(): UnlockForCall__Inputs {
    return new UnlockForCall__Inputs(this);
  }

  get outputs(): UnlockForCall__Outputs {
    return new UnlockForCall__Outputs(this);
  }
}

export class UnlockForCall__Inputs {
  _call: UnlockForCall;

  constructor(call: UnlockForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnlockForCall__Outputs {
  _call: UnlockForCall;

  constructor(call: UnlockForCall) {
    this._call = call;
  }
}
